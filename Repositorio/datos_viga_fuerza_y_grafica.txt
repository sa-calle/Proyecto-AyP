import tkinter as tk
from tkinter import messagebox
import ttkbootstrap as ttk 
import matplotlib.pyplot as plt


# Variables globales
longitud_viga = 10
datos = []  

# Función para graficar la viga
def graficar_viga(datos, long, material, tipo_de_viga):
    altura_viga = 0.01 * long

    # Colores según el material
    if material == "Madera":
        color_viga = '#8A4C29'  # Madera
    elif material == "Acero":
        color_viga = '#B0C4DE'  # Acero
    elif material == "Concreto":
        color_viga = '#A9A9A9'  # Concreto
    else:
        color_viga = '#8A4C29'  # Default (madera)

    # Crear la figura y los ejes
    fig, ax = plt.subplots(figsize=(10, 2))
    ax.set_xlim(-0.1 * long, 1.1 * long)
    ax.set_ylim(-2 * altura_viga, 3 * altura_viga)

    # Graficar la viga
    rect = plt.Rectangle((0, 0), long, altura_viga, color=color_viga)
    ax.add_patch(rect)

    # Graficar las fuerzas
    for carga, x in datos:
        if carga > 0:
            y_inicial = altura_viga
            dy = 1
        else:
            y_inicial = 0
            dy = -1

        ax.arrow(x, y_inicial, 0, dy * altura_viga, width=0.05,
                  head_width=0.2, head_length=0.07, fc='black', ec='black')

        ax.text(
            x, y_inicial + dy * 2.1 * altura_viga,
            f'{carga}N', ha='center', va='bottom' if dy > 0 else 'top',
            color='black'
        )

    # Ajustes de la gráfica
    ax.set_xlabel('Longitud de la viga (m)')
    ax.axis('off')
    plt.show()

# Función para mostrar los datos de la viga
def obtener_datos():
    global longitud_viga  

    try:
        tipo_de_viga = tipo_viga_var.get()  
        longitud_viga_input = longitud_viga_var.get()
        material = material_var.get()  

        if not longitud_viga_input:
            raise ValueError("La longitud de la viga no puede estar vacía.")
        longitud_viga = float(longitud_viga_input)

        if tipo_de_viga == "Simplemente apoyada":
            tipo_de_viga = "Simplemente apoyada"
        elif tipo_de_viga == "Viga en voladizo":
            tipo_de_viga = "Viga en voladizo"
        elif tipo_de_viga == "Doblemente empotrada":
            tipo_de_viga = "Doblemente empotrada"
        else:
            raise ValueError("Tipo de viga inválido.")

        if material == "Madera":
            material = "Madera"
        elif material == "Acero":
            material = "Acero"
        elif material == "Concreto":
            material = "Concreto"
        else:
            raise ValueError("Material inválido.")

        datos_viga = f"Tipo de viga: {tipo_de_viga}\nLongitud de la viga: {longitud_viga} m\nMaterial: {material}\n\n"
        datos_fuerzas = "Fuerzas ingresadas:\n"
        
        if not datos:
            datos_fuerzas += "No se han ingresado fuerzas."
        else:
            for fuerza in datos:
                datos_fuerzas += f"Carga: {fuerza[0]} N, Coordenada x: {fuerza[1]} m\n"
        
        mensaje = datos_viga + datos_fuerzas
        messagebox.showinfo("Datos de la Viga y Fuerzas", mensaje)

    except ValueError as e:
        messagebox.showerror("Error", str(e))

# Función para agregar fuerzas
def agregar_fuerza():
    try:
        global longitud_viga  
        longitud_viga = float(longitud_viga_var.get())  
        
        carga = float(entry_carga.get())
        x = float(entry_x.get())

        if not (0 <= x <= longitud_viga):
            raise ValueError(f"La coordenada x debe estar entre 0 y {longitud_viga}.")

        datos.append([carga, x])
        messagebox.showinfo("Fuerza Agregada", "Fuerza agregada correctamente.")

        entry_carga.delete(0, tk.END)
        entry_x.delete(0, tk.END)

    except ValueError as e:
        messagebox.showerror("Error", str(e))

# Función para borrar las fuerzas
def borrar_fuerzas():
    global datos
    if not datos:
        messagebox.showwarning("Advertencia", "No hay fuerzas para borrar.")
    else:
        datos.clear()  
        messagebox.showinfo("Fuerzas Borradas", "Las fuerzas ingresadas han sido borradas.")

# Función para mostrar el gráfico con la viga
def mostrar_grafico():
    # Obtén los valores seleccionados para el material y el tipo de viga
    material = material_var.get()
    tipo_de_viga = tipo_viga_var.get()

    # Llama a graficar_viga con todos los argumentos requeridos
    graficar_viga(datos, longitud_viga, material, tipo_de_viga)

# Interfaz gráfica
root = ttk.Window(themename="flatly")  
root.title("Ingreso de Fuerzas y Datos de la Viga")
root.geometry('500x600')

# Frame para los datos de la viga
viga_frame = ttk.Frame(root, padding=10)
viga_frame.pack(padx=10, pady=10)

label_tipo_viga = ttk.Label(viga_frame, text="Tipo de viga:", anchor="w")
label_tipo_viga.grid(row=0, column=0, padx=5, pady=5, sticky="w")
tipo_viga_var = ttk.StringVar()
entry_tipo_viga = ttk.Combobox(viga_frame, textvariable=tipo_viga_var, values=["Simplemente apoyada", "Viga en voladizo", "Doblemente empotrada"], state="readonly")
entry_tipo_viga.grid(row=0, column=1, padx=5, pady=5)

label_longitud_viga = ttk.Label(viga_frame, text="Longitud de la viga [m]:", anchor="w")
label_longitud_viga.grid(row=1, column=0, padx=5, pady=5, sticky="w")
longitud_viga_var = ttk.StringVar()
entry_longitud_viga = ttk.Entry(viga_frame, textvariable=longitud_viga_var)
entry_longitud_viga.grid(row=1, column=1, padx=5, pady=5)

label_material = ttk.Label(viga_frame, text="Material :", anchor="w")
label_material.grid(row=2, column=0, padx=5, pady=5, sticky="w")
material_var = ttk.StringVar()
entry_material = ttk.Combobox(viga_frame, textvariable=material_var, values=["Madera", "Acero", "Concreto"], state="readonly")
entry_material.grid(row=2, column=1, padx=5, pady=5)

# Frame para las fuerzas
fuerzas_frame = ttk.Frame(root, padding=10)
fuerzas_frame.pack(padx=10, pady=10)

label_carga = ttk.Label(fuerzas_frame, text=" Fuerza [N]:", anchor="w")
label_carga.grid(row=0, column=0, padx=5, pady=5, sticky="w")
entry_carga = ttk.Entry(fuerzas_frame)
entry_carga.grid(row=0, column=1, padx=5, pady=5)

label_x = ttk.Label(fuerzas_frame, text="Coordenada en x [m]:", anchor="w")
label_x.grid(row=1, column=0, padx=5, pady=5, sticky="w")
entry_x = ttk.Entry(fuerzas_frame)
entry_x.grid(row=1, column=1, padx=5, pady=5)

# Botones
btn_agregar = ttk.Button(fuerzas_frame, text="Agregar Fuerza", command=agregar_fuerza, bootstyle="primary outline-toolbutton")
btn_agregar.grid(row=3, column=0, padx=5, pady=5)

btn_borrar_fuerzas = ttk.Button(fuerzas_frame, text="Borrar Fuerzas", command=borrar_fuerzas, bootstyle="danger outline-toolbutton")
btn_borrar_fuerzas.grid(row=3, column=1, padx=5, pady=5)

btn_obtener_datos = ttk.Button(root, text="Obtener Datos", command=obtener_datos, bootstyle="info outline-toolbutton")
btn_obtener_datos.pack(pady=10)

btn_mostrar_grafico = ttk.Button(root, text="Mostrar Gráfico", command=mostrar_grafico, bootstyle="success outline-toolbutton")
btn_mostrar_grafico.pack(pady=10)

root.mainloop()
