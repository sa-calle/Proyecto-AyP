import tkinter as tk
from tkinter import messagebox
import ttkbootstrap as ttk 

longitud_viga = 10 
datos = []  

def agregar_fuerza():
    try:
        carga = float(entry_carga.get())
        x = float(entry_x.get())
        tipo = int(entry_tipo.get())

        if not (0 <= x <= longitud_viga):
            raise ValueError(f"La coordenada x debe estar entre 0 y {longitud_viga}.")
        if tipo not in [0, 1]:
            raise ValueError("El tipo de carga debe ser 0 (puntual) o 1 (distribuida).")

        datos.append([carga, x, tipo])
        messagebox.showinfo("Fuerza Agregada", "Fuerza agregada correctamente.")

        entry_carga.delete(0, tk.END)
        entry_x.delete(0, tk.END)
        entry_tipo.delete(0, tk.END)

    except ValueError as e:
        messagebox.showerror("Error", str(e))

def borrar_fuerzas():
    global datos
    if not datos:
        messagebox.showwarning("Advertencia", "No hay fuerzas para borrar.")
    else:
        datos.clear()  
        messagebox.showinfo("Fuerzas Borradas", "Las fuerzas ingresadas han sido borradas.")

def obtener_datos():
    try:
        tipo_de_viga = tipo_viga_var.get()  
        longitud_viga_input = longitud_viga_var.get()
        material = material_var.get()  

        if not longitud_viga_input:
            raise ValueError("La longitud de la viga no puede estar vacía.")
        longitud_viga = float(longitud_viga_input)

        if tipo_de_viga == "Simplemente apoyada":
            tipo_de_viga = "Simplemente apoyada"
        elif tipo_de_viga == "Viga en voladizo":
            tipo_de_viga = "Viga en voladizo"
        elif tipo_de_viga == "Doblemente empotrada":
            tipo_de_viga = "Doblemente empotrada"
        else:
            raise ValueError("Tipo de viga inválido.")

        if material == "Madera":
            material = "Madera"
        elif material == "Acero":
            material = "Acero"
        elif material == "Concreto":
            material = "Concreto"
        else:
            raise ValueError("Material inválido.")

        datos_viga = f"Tipo de viga: {tipo_de_viga}\nLongitud de la viga: {longitud_viga} m\nMaterial: {material}\n\n"
        datos_fuerzas = "Fuerzas ingresadas:\n"
        
        if not datos:
            datos_fuerzas += "No se han ingresado fuerzas."
        else:
            for fuerza in datos:
                datos_fuerzas += f"Carga: {fuerza[0]} N, Coordenada x: {fuerza[1]} m, Tipo: {'Puntual' if fuerza[2] == 0 else 'Distribuida'}\n"
        
        messagebox.showinfo("Datos de la Viga y Fuerzas", datos_viga + datos_fuerzas)

    except ValueError as e:
        messagebox.showerror("Error", str(e))

root = ttk.Window(themename="flatly") 
root.title("Ingreso de Fuerzas y Datos de la Viga")
root.geometry('500x600')

viga_frame = ttk.Frame(root, padding=10)
viga_frame.pack(padx=10, pady=10)

label_tipo_viga = ttk.Label(viga_frame, text="Tipo de viga (1-3):")
label_tipo_viga.grid(row=0, column=0, padx=5, pady=5)
tipo_viga_var = ttk.StringVar()
entry_tipo_viga = ttk.Combobox(viga_frame, textvariable=tipo_viga_var, values=["Simplemente apoyada", "Viga en voladizo", "Doblemente empotrada"], state="readonly")
entry_tipo_viga.grid(row=0, column=1, padx=5, pady=5)

label_longitud_viga = ttk.Label(viga_frame, text="Longitud de la viga (m):")
label_longitud_viga.grid(row=1, column=0, padx=5, pady=5)
longitud_viga_var = ttk.StringVar()
entry_longitud_viga = ttk.Entry(viga_frame, textvariable=longitud_viga_var)
entry_longitud_viga.grid(row=1, column=1, padx=5, pady=5)

label_material = ttk.Label(viga_frame, text="Material (1-3):")
label_material.grid(row=2, column=0, padx=5, pady=5)
material_var = ttk.StringVar()
entry_material = ttk.Combobox(viga_frame, textvariable=material_var, values=["Madera", "Acero", "Concreto"], state="readonly")
entry_material.grid(row=2, column=1, padx=5, pady=5)

fuerzas_frame = ttk.Frame(root, padding=10)
fuerzas_frame.pack(padx=10, pady=10)

label_carga = ttk.Label(fuerzas_frame, text="Carga de la fuerza:")
label_carga.grid(row=0, column=0, padx=5, pady=5)
entry_carga = ttk.Entry(fuerzas_frame)
entry_carga.grid(row=0, column=1, padx=5, pady=5)

label_x = ttk.Label(fuerzas_frame, text=f"Coordenada en x (0 a {longitud_viga}):")
label_x.grid(row=1, column=0, padx=5, pady=5)
entry_x = ttk.Entry(fuerzas_frame)
entry_x.grid(row=1, column=1, padx=5, pady=5)

label_tipo = ttk.Label(fuerzas_frame, text="Tipo de carga (0: puntual, 1: distribuida):")
label_tipo.grid(row=2, column=0, padx=5, pady=5)
entry_tipo = ttk.Entry(fuerzas_frame)
entry_tipo.grid(row=2, column=1, padx=5, pady=5)

btn_agregar = ttk.Button(fuerzas_frame, text="Agregar Fuerza", command=agregar_fuerza, bootstyle="primary outline-toolbutton")
btn_agregar.grid(row=3, column=0, padx=5, pady=5)

btn_borrar_fuerzas = ttk.Button(fuerzas_frame, text="Borrar Fuerzas", command=borrar_fuerzas, bootstyle="danger outline-toolbutton")
btn_borrar_fuerzas.grid(row=3, column=1, padx=5, pady=5)

btn_obtener_datos = ttk.Button(root, text="Obtener Datos", command=obtener_datos, bootstyle="info outline-toolbutton")
btn_obtener_datos.pack(pady=20)

# Ejecutar la aplicación
root.mainloop()


